# -*- coding: utf-8 -*-
"""Travel Korea!...202310005

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jaTdl7dCHyuKT9e_KDw-hcF7oaRwZZPt
"""

import heapq
import networkx as nx
import matplotlib.pyplot as plt

landmarks = {
    "Jeonju": {
        "Daejon": 62,
        "Gwangju":80,
        "Jinju": 116
    },
    "Jinju": {
        "Jeonju": 116,
        "Busan": 86
    },
    "Gwangju": {
        "Jeonju": 80,
        "Daejon": 142,
        "Ulsan": 121
    },
    "Ulsan": {
        "Gwangju": 121,
        "Daejon": 197,
        "Busan": 46
    },
    "Jeju": {
        "Busan": 299
    },
    "Busan": {
        "Jinju": 86,
        "Ulsan": 46,
        "Jeju": 299
    },
    "Daejon": {
        "Jeonju": 62,
        "Ulsan": 197,
        "Gwangju": 142
    }
}

# BFS (shortest path)
def bfs(graph, start, end):
  visited = set()
  queue = [(start, [start])]
  while queue:
    current, path = queue.pop(0)
    if current == end:
      return path
    if current not in visited:
      visited.add(current)
      for neighbor in graph[current]:
        if neighbor not in visited:
          queue.append((neighbor, path + [neighbor]))
  return None

# Dijkstra's (Shortest travel time)
def dijistra(graph, start):
  min_heap = [(0, start)]
  times = {landmark: float ('inf') for landmark in graph}
  times[start] = 0
  while min_heap:
    current_time, current_landmark = heapq.heappop(min_heap)
    for neighbor, time in graph[current_landmark].items():
      new_time = current_time + time
      if new_time < times[neighbor]:
        times[neighbor] = new_time
        heapq.heappush(min_heap, (new_time, neighbor))
  return times

#Examples
print("BFS from Jeonju to Jeju")
print(bfs(landmarks, "Jeonju", "Jeju"))
print("Dijkstra's from Jeonju to Jeju")
print(dijistra(landmarks, "Jeonju"))

import matplotlib.pyplot as plt
import networkx as nx

def visualize_graph(graph):
    G = nx.Graph()

    # Adding edges to the graph
    for landmark, connections in graph.items():
        for neighbor, weight in connections.items():
            G.add_edge(landmark, neighbor, weight=weight)

    # Define the layout of the graph
    pos = nx.spring_layout(G)

    # Draw the graph with labels, node size, and font size for labels
    nx.draw(G, pos, with_labels=True, node_size=2000, font_size=10, node_color='skyblue')

    # Draw edge labels (weights)
    edge_labels = nx.get_edge_attributes(G, 'weight')
    nx.draw_networkx_edge_labels(G, pos, edge_labels=edge_labels)

    # Display the title and the plot
    plt.title("Travel Itinerary Graph")
    plt.show()

visualize_graph(landmarks)